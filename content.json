{"pages":[{"title":"关于本站","text":"著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。","link":"/about/index.html"}],"posts":[{"title":"百度移动统计错误报告的使用","text":"百度移动统计网址： https://mtj.baidu.com/web/dashboard 终端命令： xcrun atos –arch arm64 -o +包路径 -l 基地址+回车+偏移地址+回车 包路径 基地址 &amp; 偏移地址","link":"/2020/10/19/%E7%99%BE%E5%BA%A6%E7%A7%BB%E5%8A%A8%E7%BB%9F%E8%AE%A1%E9%94%99%E8%AF%AF%E6%8A%A5%E5%91%8A%E7%9A%84%E4%BD%BF%E7%94%A8/"},{"title":"alloc &amp; init","text":"一、前言创建对象的例子： 二、如何探索？2.1 普通断点 + 跟踪调试 按住control + in 进入调试查看汇编调用信息；使用真机情况下能定位到 libobjc.A.dylib objc_alloc，所以是要探究的方法在 libobjc.A.dylib 这个库中。 2.2 符号断点设置 要探究alloc方法，所以我们添加一个alloc的符号断点，这时候会显示断到很多类的alloc方法，但是没有关系，因为我们断点了代码所在对象，所以我们直接调试就行；断点执行下一步，就能看到 libobjc.A.dylib + [NSObject alloc]，说明是调用了libobjc.A.dylib库中的NSObject 的 alloc 类方法。 2.3 汇编跟踪 Debug =&gt; Debug Workflow =&gt; Always Show Disassembly 开启汇跟踪设置。 可查看到代码[MRObject alloc]的汇编代码下一步是调用objc_alloc; 所以我们需要研究objc_alloc方法即为alloc的底层实现方法! 三、objc 源码 苹果开源源码地址 =&gt; opensource.apple.com/tarballs/ 搜索 objc 即可看到 objc 源码地址 当前 objc4-756.2 为最新版本! 我的 github 上传了objc4-756.2的源码：https://github.com/speam/OjbcSuorce.git 在objc源码中我们看到很多 old 和 new 的文件命名标识，这代表objc在迭代过程中过渡了两个版本，一个新版，一个旧版。 现在我们都是使用的新版本api，所以查看源码逻辑的时候只需要定位 objc2 或者 new标识的新版本~ 四、准备进行源码调试 前述方式不能直观的跟踪到底层的方法调用。 所以将objc源码集成到我们的调试工程中，通过断点跟踪才能一目了然。 如何集成objc源码 =&gt; iOS_objc4-756.2 最新源码编译调试 五、进行 objc 源码调试/查看/跟踪5.1 alloc =&gt; objc_rootAlloc入口： 5.2 callAlloc 首先看 __OBJC2__的分支，现在是使用的新版本；然后看第一个判断fastpath(!cls-&gt;ISA()-&gt;hasCustomAWZ())，这里是判断该类是否有重写initWithZone；第二层判断 fastpath(cls-&gt;canAllocFast())，是否可以快速创建，这里会返回false，具体实现见下分析。 5.2.1 canAllocFast canAllocFast()最后会调 bits.canAllocFast() 跟踪bits.canAllocFast()中的canAllocFast 实现： 查看 FAST_ALLOC 宏定义 5.2.2 class_createInstance 打印obj的值，印证流程 5.3 init 六、alloc 流程图 七、lldb / gdb 命令调试 1.x/4gx obj:代表以十六进制打印obj的4段内存信息 2.p/t:代表打印二进制信息(还有p/o、p/d、p/x分别代表八进制、十进制和十六进制打印) 参考链接https://juejin.im/post/6844904036173365255","link":"/2020/10/19/alloc&init/"}],"tags":[],"categories":[{"name":"iOS·质量&amp;效率","slug":"iOS·质量-效率","link":"/categories/iOS%C2%B7%E8%B4%A8%E9%87%8F-%E6%95%88%E7%8E%87/"},{"name":"iOS·底层原理","slug":"iOS·底层原理","link":"/categories/iOS%C2%B7%E5%BA%95%E5%B1%82%E5%8E%9F%E7%90%86/"}]}